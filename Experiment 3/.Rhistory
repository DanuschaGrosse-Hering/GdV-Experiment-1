g3 <-plot(lm(DD$H~DD$B1))
g3[2]
plot(lm(DD$H~DD$B1))
setwd("C:\\Users\\danus\\OneDrive\\Uni\\4.Semester\\Nichtparametrik und robuste Statistik\\übung")
Data <-read.csv("Dataset 96 .csv")
DA <- Data[which(Data$P=="A"),]
DB <- Data[which(Data$P=="B"),]
DD <- Data[which(Data$P=="D"),]
## Aus der ML von Blatt 1:
DataQ <- quantile(Data$D1, probs = c(1/3, 2/3), na.rm = TRUE)
Druckfestigkeitsklasse <- numeric(length(Data$D1))
Druckfestigkeitsklasse[DataQ[1] <= Data$D1 & Data$D1 < DataQ[2]] <- 1
Druckfestigkeitsklasse[Data$D1 >= DataQ[2]] <- 2
Druckfestigkeitsklasse[is.na(Data$D1)] <- NA
N <- length(Data[,1])
Ni <-sum(is.na(Data$D1)==F)
Nj <-sum(is.na(Data$P)==F)
(Ni*Nj)/5 >=5
round(chisq.test(as.matrix(table(Druckfestigkeitsklasse,Data$P)), correct = F)$p.value, digits = 4)
g1 <- data.frame(DK = Druckfestigkeitsklasse, P = Data$P, T = Data$T)
Grafik_1 <- function(o, oname)
{
barplot(table(g1$DK,o)/432, names.arg = c("Aachen", "Bochum", "Dortmund"),
col = blues9[2:4], ylim = c(0,0.4), beside = F,
main=paste("Unabhängigkeit des " ,oname, " und der Druckfestigkeit"))
legend("topleft", lwd=3, legend=c(0:2),
col = blues9[2:4], title="Klasse", bty = "n")
}
Grafik_1(g1$P, "Produktionsort")
round(chisq.test(as.matrix(table(Druckfestigkeitsklasse,Data$T)), correct = F)$p.value, digits = 4)
Grafik_1(g1$T, "Testort")
shapiro.test(DA$H)$p.value >0.05 && shapiro.test(DA$B1)$p.value > 0.05
shapiro.test(DB$H)$p.value >0.05 && shapiro.test(DB$B1)$p.value > 0.05
shapiro.test(DD$H)$p.value >0.05 && shapiro.test(DD$B1)$p.value > 0.05
#Aachen
round(cor.test(DA$H, DA$B1, alternative = "two.sided", method = "pearson")$p.value, digits=4)
#Bochum
round(cor.test(DB$H, DB$B1, alternative = "two.sided", method = "pearson")$p.value, digits=4)
#Dortmund
round(cor.test(DD$H, DD$B1, alternative = "two.sided", method = "pearson")$p.value, digits=4)
#Aachen
round(cor.test(DA$H, DA$B1, alternative = "two.sided", method = "spearman")$p.value, digits=4)
#Bochum
round(cor.test(DB$H, DB$B1, alternative = "two.sided", method = "spearman")$p.value, digits=4)
#Dortmund
round(cor.test(DD$H, DD$B1, alternative = "two.sided", method = "spearman")$p.value, digits=4)
Grafik_2 <- function(d, name_d, x="topright")
{
c <- as.character(round(cor(d$H, d$B1, use = "complete.obs" ), digits=2))
c <- paste("Korrelation=", c)
#negativer Zusammenhang
a_c <-lm(d$H~d$B1)$coefficients
a <- function(x){as.numeric(a_c[1]+a_c[2]*x)}
plot(d$B1,d$H, main=name_d, xlab="Bestandteile",
ylab="Hitzeentwicklung", pch=20, col="lightcoral" )
curve(a(x), add=T, lwd= 2, col= "lightblue")
legend(x, legend= c("Datenpunkte", "lin.Modell"), lwd=2,
col=c("lightcoral","lightblue"), title = c, cex = 0.7 )
}
#par(mfrow=c(3,1))
Grafik_2(DA, "Aachen", x="bottomleft")
Grafik_2(DB, "Bochum")
Grafik_2(DD,"Dortmund")
perm.test.P <-function (x,y,M=10)
{
r<-cor(x,y)
N<-length(y)
PWert<-0
for(m in 1:M)
{
pi<-sample(1:N)
if(abs(cor(x,y[pi]))>abs(r))
{
PWert<-PWert+1
}
}
PWert/M
}
Remove_NA <- function(d)
{
return(na.exclude(data.frame(B1=d$B1,H=d$H)))
}
DA_R <-Remove_NA(DA)
DB_R <-Remove_NA(DB)
DD_R <-Remove_NA(DD)
#Aachen
perm.test.P(DA_R$H,DA_R$B1, M=10000)
#Bochum
perm.test.P(DB_R$H,DB_R$B1, M=10000)
#Dortmund
perm.test.P(DD_R$H,DD_R$B1, M=10000)
perm.test.S<-function (x,y,M=10)
{
x<-rank(x)
y<-rank(y)
r<-cor(x,y)
N<-length(y)
PWert<-0
for(m in 1:M)
{
pi<-sample(1:N)
if(abs(cor(x,y[pi]))>abs(r))
{
PWert<-PWert+1
}
}
PWert/M
}
#Aachen
perm.test.S(DA$H,DA$B1, M=10000)
#Bochum
perm.test.S(DB$H,DB$B1, M=10000)
#Dortmund
perm.test.S(DD$H,DD$B1, M=10000)
Grafik_3 <- function(d, name_d, x="topright")
{
c <- as.character(round(cor(d$H, d$B1, use = "complete.obs" ), digits=2))
c <- paste("Korrelation=", c)
a_c <-lm(d$H~d$B1)$coefficients
a <- function(x){as.numeric(a_c[1]+a_c[2]*x)}
#plot(d$B1,d$H, main=name_d, xlab="Bestandteile",
#     ylab="Hitzeentwicklung", pch=20, col="lightcoral" )
#curve(a(x), add=T, lwd= 2, col= "lightblue")
#legend(x, legend= c("Datenpunkte", "lin.Modell"), lwd=2,
#       col=c("lightcoral","lightblue"), title = c, cex = 0.7 )
plot(lm(d$H~d$B1))
}
#par(mfrow=c(3,1))
Grafik_3(DA, "Aachen", x="bottomleft")
#Grafik_3(DB, "Bochum")
#Grafik_3(DD,"Dortmund")
Grafik_3 <- function(d, name_d, x="topright")
{
c <- as.character(round(cor(d$H, d$B1, use = "complete.obs" ), digits=2))
c <- paste("Korrelation=", c)
a_c <-lm(d$H~d$B1)$coefficients
a <- function(x){as.numeric(a_c[1]+a_c[2]*x)}
plot(d$B1,d$H, main=name_d, xlab="Bestandteile",
ylab="Hitzeentwicklung", pch=20, col="lightcoral" )
curve(a(x), add=T, lwd= 2, col= "lightblue")
legend(x, legend= c("Datenpunkte", "lin.Modell"), lwd=2,
col=c("lightcoral","lightblue"), title = c, cex = 0.7 )
#plot(lm(d$H~d$B1))
}
#par(mfrow=c(3,1))
Grafik_3(DA, "Aachen", x="bottomleft")
#Grafik_3(DB, "Bochum")
#Grafik_3(DD,"Dortmund")
g1 <- data.frame(DK = Druckfestigkeitsklasse, P = Data$P, T = Data$T)
Grafik_1 <- function(o, oname)
{
barplot(table(g1$DK,o)/432, names.arg = c("Aachen", "Bochum", "Dortmund"),
col = blues9[2:4], ylim = c(0,0.4), beside = F,
main=paste("Unabhängigkeit des " ,oname, " und der Druckfestigkeit"))
legend("top", lwd=3, legend=c(0:2), horiz = T,
col = blues9[3:5], title="Klasse", bty = "n")
}
Grafik_1(g1$P, "Produktionsort")
g1 <- data.frame(DK = Druckfestigkeitsklasse, P = Data$P, T = Data$T)
Grafik_1 <- function(o, oname)
{
barplot(table(g1$DK,o)/432, names.arg = c("Aachen", "Bochum", "Dortmund"),
col = blues9[2:4], ylim = c(0,0.4), beside = F,
main=paste("Unabhängigkeit des " ,oname, " und der Druckfestigkeit"))
legend("top", lwd=3, legend=c(0:2), horiz = T,
col = blues9[4:6], title="Klasse", bty = "n")
}
Grafik_1(g1$P, "Produktionsort")
g1 <- data.frame(DK = Druckfestigkeitsklasse, P = Data$P, T = Data$T)
Grafik_1 <- function(o, oname)
{
barplot(table(g1$DK,o)/432, names.arg = c("Aachen", "Bochum", "Dortmund"),
col = blues9[4:6], ylim = c(0,0.4), beside = F,
main=paste("Unabhängigkeit des " ,oname, " und der Druckfestigkeit"))
legend("top", lwd=3, legend=c(0:2), horiz = T,
col = blues9[4:6], title="Klasse", bty = "n")
}
Grafik_1(g1$P, "Produktionsort")
#Aachen
round(cor.test(DA$H, DA$B1, alternative = "two.sided", method = "pearson")$p.value, digits=4)
round(cor(DA$H, DA$B1, use = "complete.obs", method = "pearson" ), digits=4)
#Bochum
round(cor.test(DB$H, DB$B1, alternative = "two.sided", method = "pearson")$p.value, digits=4)
round(cor(DB$H, DB$B1, use = "complete.obs" ), digits=4)
#Dortmund
round(cor.test(DD$H, DD$B1, alternative = "two.sided", method = "pearson")$p.value, digits=4)
round(cor(DD$H, DD$B1, use = "complete.obs" ), digits=4)
#Aachen
round(cor.test(DA$H, DA$B1, alternative = "two.sided", method = "spearman")$p.value, digits=4)
round(cor(DA$H, DA$B1, use = "complete.obs", method ="spearman" ), digits=4)
#Bochum
round(cor.test(DB$H, DB$B1, alternative = "two.sided", method = "spearman")$p.value, digits=4)
round(cor(DB$H, DB$B1, use = "complete.obs", method ="spearman" ), digits=4)
#Dortmund
round(cor.test(DD$H, DD$B1, alternative = "two.sided", method = "spearman")$p.value, digits=4)
round(cor(DD$H, DD$B1, use = "complete.obs", method ="spearman" ), digits=4)
dbinom(5,24,0.5)
dbinom(10,24,0.5)
dbinom(23,24,0.5)
pbinom(20,24,0.5)
pbinom(10,24,0.5)
pbinom(15,24,0.5)
pbinom(17,24,0.5)
pbinom(18,24,0.5)
k <- (0:24)
library(xtable)
k <- (0:24)
p<-rep(p,25)
library(xtable)
k <- (0:24)
p <-rep(0,25)
for( i in 0:24){p[i] <- pbinom(i,24,0.5)}
xtabs(k,p, p>0.99)
p>0.99
xtabs(data.frame(k,p, p>0.99))
library(xtable)
k <- (0:24)
p <-rep(0,25)
for( i in 0:24){p[i] <- pbinom(i,24,0.5)}
xtabs(data.frame(c(k,p, p>0.99))
xtabs(cbind(k,p,p>0.99))
cbind(k,p,p>0.99)
p <- round(r, digits = 4)
p <- round(p, digits = 4)
cbind(k,p,p>0.99)
pbinom(17,24,0.5)
pbinom(18,24,0.5)
k <- (0:24)
p <-rep(0,25)
for( i in 0:24){p[i] <- pbinom(i,24,0.5)}
p <- round(p, digits = 4)
cbind(k,p,p>0.99)
pbinom(k,24,0.5)
round(pbinom(k,24,0.5), digits = 4)
p <-round(pbinom(k,24,0.5), digits = 4)
cbind(k,p,p>0.99)
library(xtable)
k <- (0:24)
p <-round(pbinom(k,24,0.5), digits = 4)
cbind(k,p,p>0.99)
pbinom(18,24,0.5)
xtable(cbind(k,p,p>0.99))
kable(cbind(k,p,p>0.99))
library(xtable)
kable(cbind(k,p,p>0.99))
library(knitr)
kable(cbind(k,p,p>0.99))
kable(t(cbind(k,p,p>0.99)))
kable(t(cbind(k,p,p>0.99)))
kable(t(cbind(k,p,p>0.99)), digits = 4)
t(kable(cbind(k,p,p>0.99)))
kable(cbind(k,p,p>0.99))
t(kable(cbind(k,p,p>0.99)))
t(kable(data.frame(k,p,p>0.99)))
kable(t(data.frame(k,p,p>0.99)))
kable(data.frame(k,p,p>0.99))
p <-round(pbinom(k,24,0.7), digits = 4)
kable(data.frame(k,p,p>0.99))
kable(rbind(k,p,p>0.99))
rbind(k,p,p>0.99)
kable(rbind(k,p,p>0.99))
curve(pbinom(x,24,0.5), from = 0, to=24)
curve(pbinom(x,24,0.5), from = 0, to=24)
abline(h=0.01)
curve(pbinom(18,24,x), from = 0, to=1)
abline(h=0.01)
curve(pbinom(18,30,x), from = 0, to=1)
abline(h=0.05)
curve(dbinom(18,30,x), from = 0, to=1)
abline(h=0.05)
curve(dbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
curve(pbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
curve(qbinom(6,7,x), from = 0, to=1)
curve(pbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
abline(v=0.35)
curve(1-pbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
abline(v=0.35)
curve(1-dbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
abline(v=0.35)
curve(1-pbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
abline(v=0.35)
curve(1-pbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
abline(v=0.35)
curve(1-dbinom(6,7,x), from = 0, to=1)
curve(1-dbinom(6,7,x), from = 0, to=1)
abline(h=0.05)
abline(v=0.35)
curve(1-pbinom(5,7,x), from = 0, to=1)
abline(h=0.05)
abline(v=0.35)
curve(1-pbinom(17,24,x), from = 0, to=1)
abline(h=0.01)
curve(1-pbinom(17,24,x), from = 0, to=1)
abline(h=0.01)
abline(v=0.5)
curve(1-pbinom(17,24,x), from = 0.4, to=0.6)
abline(h=0.01)
abline(v=0.5)
par(mfrow=c(1,2))
curve(1-pbinom(17,24,x), from = 0, to=1)
abline(h=0.01)
abline(v=0.5)
curve(1-pbinom(17,24,x), from = 0.4, to=0.6)
abline(h=0.01)
abline(v=0.5)
1-pbinom(6,7,0.35)
1-pbinom(5,7,0.35)
(0.01-1-pbinom(17,24,0.5))/dbinom(17,24,0.5)
dbinom(17,24,0.5)
(0.01-1-pbinom(17,24,0.5))
d <- (0.01-1-pbinom(17,24,0.5))/dbinom(17,24,0.5)
d <- (0.01-1-pbinom(17,24,0.5))/dbinom(17,24,0.5)
curve(1-pbinom(17,24,x)+d*dbinom(17,24,0.5), from = 0, to=1)
abline(h=0.01)
abline(v=0.5)
dbinom(5,7,0.35)
(0.05-1-pbinom(5,7,0.35))/dbinom(5,7,0.35)
1-pbinom(5,7,0.35)
(0.05-(1-pbinom(5,7,0.35))/dbinom(5,7,0.35)
(0.05-(1-pbinom(5,7,0.35)))/dbinom(5,7,0.35)
(0.05-(1-pbinom(5,7,0.35)))/dbinom(5,7,0.35)
(0.05-(1-pbinom(5,7,0.35)))/dbinom(5,7,0.35)
5+5
(0.05-(1-pbinom(5,7,0.35)))/dbinom(5,7,0.35)
d <- (0.01-(1-pbinom(17,24,0.5)))/dbinom(17,24,0.5)
d
d <- (0.01-(1-pbinom(17,24,0.5)))/dbinom(17,24,0.5)
curve(1-pbinom(17,24,x)+d*dbinom(17,24,0.5), from = 0, to=1)
abline(h=0.01)
abline(v=0.5)
d <- (0.01-(1-pbinom(17,24,0.5)))/dbinom(17,24,0.5)
par(mfrow=c(1,2))
curve(1-pbinom(17,24,x)+d*dbinom(17,24,0.5), from = 0, to=1)
abline(h=0.01)
abline(v=0.5)
curve(1-pbinom(17,24,x)+d*dbinom(17,24,0.5), from = 0.4, to=0.6)
abline(h=0.01)
abline(v=0.5)
par(mfrow=c(1,2))
curve(1-pbinom(21,24,x), from = 0, to=1)
abline(h=0.01)
abline(v=0.7)
curve(1-pbinom(21,24,x), from = 0.4, to=0.6)
abline(h=0.01)
abline(v=0.7)
par(mfrow=c(1,2))
curve(1-pbinom(21,24,x), from = 0, to=1)
abline(h=0.01)
abline(v=0.7)
curve(1-pbinom(21,24,x), from = 0.4, to=0.8)
abline(h=0.01)
abline(v=0.7)
par(mfrow=c(1,2))
curve(1-pbinom(21,24,x), from = 0, to=1)
abline(h=0.01)
abline(v=0.7)
curve(1-pbinom(21,24,x), from = 0.65, to=0.8)
abline(h=0.01)
abline(v=0.7)
par(mfrow=c(1,2))
curve(1-pbinom(21,24,x), from = 0, to=1)
abline(h=0.01)
abline(v=0.7)
curve(1-pbinom(21,24,x), from = 0.65, to=0.75)
abline(h=0.01)
abline(v=0.7)
d <- (0.01-(1-pbinom(21,24,0.7)))/dbinom(21,24,0.7)
par(mfrow=c(1,2))
curve(1-pbinom(21,24,x)+d*dbinom(21,24,0.5), from = 0, to=1)
abline(h=0.01)
abline(v=0.5)
curve(1-pbinom(21,24,x)+d*dbinom(21,24,0.5), from = 0.4, to=0.6)
abline(h=0.01)
abline(v=0.5)
d <- (0.01-(1-pbinom(21,24,0.7)))/dbinom(21,24,0.7)
par(mfrow=c(1,2))
curve(1-pbinom(21,24,x)+d*dbinom(21,24,0.7), from = 0, to=1)
abline(h=0.01)
abline(v=0.5)
curve(1-pbinom(21,24,x)+d*dbinom(21,24,0.7), from = 0.65, to=0.75)
abline(h=0.01)
abline(v=0.5)
d <- (0.01-(1-pbinom(21,24,0.7)))/dbinom(21,24,0.7)
par(mfrow=c(1,2))
curve(1-pbinom(21,24,x)+d*dbinom(21,24,0.7), from = 0, to=1)
abline(h=0.01)
abline(v=0.7)
curve(1-pbinom(21,24,x)+d*dbinom(21,24,0.7), from = 0.65, to=0.75)
abline(h=0.01)
abline(v=0.7)
f4 <- function(x){ return( c(cos(x), sin(x)))}
plot(f4(x), from = -1, to=1, type="l")
w <- function(x) {c(x*abs(x), abs(x))}
par( mai= c(1,1,0.5,0.1))
plot(matrix(w(x=seq(-1,1, by=0.1)), ncol=2), col="darkorchid", type = "l", xlab=expression(t*abs(t)), ylab=expression(abs(t)))
w <- function(x, l, c1,c2) {c(c1*cos(sqrt(l)*x)+c2*sin(sqrt(l)*x), c2*cos(sqrt(l)*x)+c1*sin(sqrt(l)*x))}
w <- function(x, l, c1,c2) {c(c1*cos(sqrt(l)*x)+c2*sin(sqrt(l)*x), c2*cos(sqrt(l)*x)+c1*sin(sqrt(l)*x))}
par( mai= c(1,1,0.5,0.1))
plot(matrix(w(x=seq(-1,1, by=0.1), c1=1, c2=1, l=4), ncol=2), col="darkorchid", type = "l", xlab=expression(t*abs(t)), ylab=expression(abs(t)))
plot(matrix(w(x=seq(-1,1, by=0.1), c1=1, c2=4, l=4), ncol=2), col="darkorchid", type = "l", xlab=expression(t*abs(t)), ylab=expression(abs(t)))
plot(matrix(w(x=seq(-1,1, by=0.1), c1=1, c2=4, l=4), ncol=2), col="darkorchid", type = "l")
plot(matrix(w(x=seq(-1,1, by=0.1), c1=1, c2=8, l=4), ncol=2), col="darkorchid", type = "l")
cos(1)+sin(1)
install.packages(keras)
install.packages("keras")
#install.packages("keras")
library(keras)
IMDB <-dataset_imdb()
Y
IMDB <-dataset_imdb()
## b)
```{r}
IMDB <-dataset_imdb()
```
IMDB <-dataset_imdb()
IMDB <-dataset_imdb()
tensorflow.keras
install_keras()
curve(log(x), from=0, to= 100)
log(10000)
log(100000)
setwd("C:\\Users\\danus\\OneDrive\\Uni\\4.Semester\\Grundlagen der Versuchspalnung\\1.Experiment\\GdV-Experiment-1\\Experiment 3")
Screening <- read.csv("Screening.CSV", sep = ";")
Optimierung <-read.csv("Optimierung.CSV", sep = ";")
View(Optimierung)
View(Screening)
View(Optimierung)
View(Screening)
summary(lm(Zeit.ohne.Klammer ~A+B+C+D+E+F+G, data= S))
setwd("C:\\Users\\danus\\OneDrive\\Uni\\4.Semester\\Grundlagen der Versuchspalnung\\1.Experiment\\GdV-Experiment-1\\Experiment 3")
library(SixSigma)
ExperimentDesign  = expand.grid(A = c(-1, 1), B = c(-1,1), C = c(-1, 1), D = c(-1,1), E = c(-1,1) )
"F" = ExperimentDesign$A * ExperimentDesign$C * ExperimentDesign$D
G = ExperimentDesign$A * ExperimentDesign$B * ExperimentDesign$C
ExperimentDesign$F = F
ExperimentDesign$G = G
library(SixSigma)
ExperimentDesign  = expand.grid(A = c(-1, 1), B = c(-1,1), C = c(-1, 1), D = c(-1,1), E = c(-1,1) )
"F" = ExperimentDesign$A * ExperimentDesign$C * ExperimentDesign$D
G = ExperimentDesign$A * ExperimentDesign$B * ExperimentDesign$C
ExperimentDesign$F = F
ExperimentDesign$G = G
Screening <- read.csv("Screening.CSV", sep = ";",dec = ",")
S <- Screening[order(Screening[,2]),]
S <-cbind(S, ExperimentDesign)
summary(lm(Zeit.ohne.Klammer ~A+B+C+D+E+F+G, data= S))
summary(lm(Zeit.mit.Klammer ~A+B+C+D+E+F+G, data= S))
Optimierung <-read.csv("Optimierung.CSV", sep = ";",dec = ",")
set.seed(1735)
p1 <-expand.grid(A = c(-1,0, 1),  G = c(-1,0,1) )
p1 <- cbind(1:9,p1)
#zweiter Durchlauf
set.seed(1736)
s <-sample(1:9,9)
p2 <-p1[s,]
p <- rbind(p1,p2)
names(p)[1] <- "Nr."
p
p[1:9,2:3]
cbind(Optimierung,p[1:9,2:3])
o1 <-cbind(Optimierung,p[1:9,2:3])
o1
o1[-3,]
o1[,-3]
o1[,-2]
o2 <- o1[,-3]
o3 <- o1[,-2]
o <- rbind(o2,o3)
o3
names(o2)
names(o2)[2]
o2 <- o1[,-3]
o3 <- o1[,-2]
names(o2)[2] <- "Zeit"
names(o3)[2] <- "Zeit"
o <- rbind(o2,o3)
o
lm(Zeit ~A + A^2+G+G^2)
lm(Zeit ~A + A^2+G+G^2, data = o)
y_observ=c(1.2,0.5,1.5,1.3,0.2,1.4)
data_set=data.frame(y=y_observ)
data_set$A = c(-1,0,1,-1,0,1)
data_set$Asquare = data_set$A^2
lm(y~A+Asquare, data=data_set)
o <- rbind(o2,o3)
o$Asquare <- o$A^2
o$Gsquare <- o$G^2
lm(Zeit ~A + Asquare+G+Gsquare, data = o)
setwd("C:\\Users\\danus\\OneDrive\\Uni\\4.Semester\\Grundlagen der Versuchspalnung\\1.Experiment\\GdV-Experiment-1\\Experiment 3")
library(SixSigma)
ExperimentDesign  = expand.grid(A = c(-1, 1), B = c(-1,1), C = c(-1, 1), D = c(-1,1), E = c(-1,1) )
"F" = ExperimentDesign$A * ExperimentDesign$C * ExperimentDesign$D
G = ExperimentDesign$A * ExperimentDesign$B * ExperimentDesign$C
ExperimentDesign$F = F
ExperimentDesign$G = G
setwd("C:\\Users\\danus\\OneDrive\\Uni\\4.Semester\\Grundlagen der Versuchspalnung\\1.Experiment\\GdV-Experiment-1\\Experiment 3")
library(SixSigma)
ExperimentDesign  = expand.grid(A = c(-1, 1), B = c(-1,1), C = c(-1, 1), D = c(-1,1), E = c(-1,1) )
"F" = ExperimentDesign$A * ExperimentDesign$C * ExperimentDesign$D
G = ExperimentDesign$A * ExperimentDesign$B * ExperimentDesign$C
ExperimentDesign$F = F
ExperimentDesign$G = G
Screening <- read.csv("Screening.CSV", sep = ";",dec = ",")
matrix(c(0.12,0,0,0.58), ncol = 2)
det(matrix(c(0.12,0,0,0.58), ncol = 2))
